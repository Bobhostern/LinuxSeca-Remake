// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "QData.hxx"

// qdata_t
// 

const qdata_t::header_optional& qdata_t::
header () const
{
  return this->header_;
}

qdata_t::header_optional& qdata_t::
header ()
{
  return this->header_;
}

void qdata_t::
header (const header_type& x)
{
  this->header_.set (x);
}

void qdata_t::
header (const header_optional& x)
{
  this->header_ = x;
}

void qdata_t::
header (::std::auto_ptr< header_type > x)
{
  this->header_.set (x);
}

const qdata_t::questions_optional& qdata_t::
questions () const
{
  return this->questions_;
}

qdata_t::questions_optional& qdata_t::
questions ()
{
  return this->questions_;
}

void qdata_t::
questions (const questions_type& x)
{
  this->questions_.set (x);
}

void qdata_t::
questions (const questions_optional& x)
{
  this->questions_ = x;
}

void qdata_t::
questions (::std::auto_ptr< questions_type > x)
{
  this->questions_.set (x);
}

const qdata_t::headera_optional& qdata_t::
headera () const
{
  return this->headera_;
}

qdata_t::headera_optional& qdata_t::
headera ()
{
  return this->headera_;
}

void qdata_t::
headera (const headera_type& x)
{
  this->headera_.set (x);
}

void qdata_t::
headera (const headera_optional& x)
{
  this->headera_ = x;
}

void qdata_t::
headera (::std::auto_ptr< headera_type > x)
{
  this->headera_.set (x);
}

const qdata_t::questionsa_optional& qdata_t::
questionsa () const
{
  return this->questionsa_;
}

qdata_t::questionsa_optional& qdata_t::
questionsa ()
{
  return this->questionsa_;
}

void qdata_t::
questionsa (const questionsa_type& x)
{
  this->questionsa_.set (x);
}

void qdata_t::
questionsa (const questionsa_optional& x)
{
  this->questionsa_ = x;
}

void qdata_t::
questionsa (::std::auto_ptr< questionsa_type > x)
{
  this->questionsa_.set (x);
}

const qdata_t::type_type& qdata_t::
type () const
{
  return this->type_.get ();
}

qdata_t::type_type& qdata_t::
type ()
{
  return this->type_.get ();
}

void qdata_t::
type (const type_type& x)
{
  this->type_.set (x);
}

void qdata_t::
type (::std::auto_ptr< type_type > x)
{
  this->type_.set (x);
}

const qdata_t::name_type& qdata_t::
name () const
{
  return this->name_.get ();
}

qdata_t::name_type& qdata_t::
name ()
{
  return this->name_.get ();
}

void qdata_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void qdata_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}


// header_t
// 

const header_t::name_type& header_t::
name () const
{
  return this->name_.get ();
}

header_t::name_type& header_t::
name ()
{
  return this->name_.get ();
}

void header_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void header_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const header_t::author_type& header_t::
author () const
{
  return this->author_.get ();
}

header_t::author_type& header_t::
author ()
{
  return this->author_.get ();
}

void header_t::
author (const author_type& x)
{
  this->author_.set (x);
}

void header_t::
author (::std::auto_ptr< author_type > x)
{
  this->author_.set (x);
}

const header_t::description_type& header_t::
description () const
{
  return this->description_.get ();
}

header_t::description_type& header_t::
description ()
{
  return this->description_.get ();
}

void header_t::
description (const description_type& x)
{
  this->description_.set (x);
}

void header_t::
description (::std::auto_ptr< description_type > x)
{
  this->description_.set (x);
}

const header_t::extra_type& header_t::
extra () const
{
  return this->extra_.get ();
}

header_t::extra_type& header_t::
extra ()
{
  return this->extra_.get ();
}

void header_t::
extra (const extra_type& x)
{
  this->extra_.set (x);
}

void header_t::
extra (::std::auto_ptr< extra_type > x)
{
  this->extra_.set (x);
}

const header_t::maxquestions_type& header_t::
maxquestions () const
{
  return this->maxquestions_.get ();
}

header_t::maxquestions_type& header_t::
maxquestions ()
{
  return this->maxquestions_.get ();
}

void header_t::
maxquestions (const maxquestions_type& x)
{
  this->maxquestions_.set (x);
}

const header_t::answernumberinput_optional& header_t::
answernumberinput () const
{
  return this->answernumberinput_;
}

header_t::answernumberinput_optional& header_t::
answernumberinput ()
{
  return this->answernumberinput_;
}

void header_t::
answernumberinput (const answernumberinput_type& x)
{
  this->answernumberinput_.set (x);
}

void header_t::
answernumberinput (const answernumberinput_optional& x)
{
  this->answernumberinput_ = x;
}

const header_t::skipisincorrect_optional& header_t::
skipisincorrect () const
{
  return this->skipisincorrect_;
}

header_t::skipisincorrect_optional& header_t::
skipisincorrect ()
{
  return this->skipisincorrect_;
}

void header_t::
skipisincorrect (const skipisincorrect_type& x)
{
  this->skipisincorrect_.set (x);
}

void header_t::
skipisincorrect (const skipisincorrect_optional& x)
{
  this->skipisincorrect_ = x;
}

const header_t::quizmode_optional& header_t::
quizmode () const
{
  return this->quizmode_;
}

header_t::quizmode_optional& header_t::
quizmode ()
{
  return this->quizmode_;
}

void header_t::
quizmode (const quizmode_type& x)
{
  this->quizmode_.set (x);
}

void header_t::
quizmode (const quizmode_optional& x)
{
  this->quizmode_ = x;
}

const header_t::skipoverride_optional& header_t::
skipoverride () const
{
  return this->skipoverride_;
}

header_t::skipoverride_optional& header_t::
skipoverride ()
{
  return this->skipoverride_;
}

void header_t::
skipoverride (const skipoverride_type& x)
{
  this->skipoverride_.set (x);
}

void header_t::
skipoverride (const skipoverride_optional& x)
{
  this->skipoverride_ = x;
}


// questions_t
// 

const questions_t::problem_sequence& questions_t::
problem () const
{
  return this->problem_;
}

questions_t::problem_sequence& questions_t::
problem ()
{
  return this->problem_;
}

void questions_t::
problem (const problem_sequence& s)
{
  this->problem_ = s;
}


// question_t
// 

const question_t::question_type& question_t::
question () const
{
  return this->question_.get ();
}

question_t::question_type& question_t::
question ()
{
  return this->question_.get ();
}

void question_t::
question (const question_type& x)
{
  this->question_.set (x);
}

void question_t::
question (::std::auto_ptr< question_type > x)
{
  this->question_.set (x);
}

const question_t::answers_type& question_t::
answers () const
{
  return this->answers_.get ();
}

question_t::answers_type& question_t::
answers ()
{
  return this->answers_.get ();
}

void question_t::
answers (const answers_type& x)
{
  this->answers_.set (x);
}

void question_t::
answers (::std::auto_ptr< answers_type > x)
{
  this->answers_.set (x);
}

const question_t::correctanswer_type& question_t::
correctanswer () const
{
  return this->correctanswer_.get ();
}

question_t::correctanswer_type& question_t::
correctanswer ()
{
  return this->correctanswer_.get ();
}

void question_t::
correctanswer (const correctanswer_type& x)
{
  this->correctanswer_.set (x);
}


// answers_t
// 

const answers_t::answer_sequence& answers_t::
answer () const
{
  return this->answer_;
}

answers_t::answer_sequence& answers_t::
answer ()
{
  return this->answer_;
}

void answers_t::
answer (const answer_sequence& s)
{
  this->answer_ = s;
}


// headera_t
// 

const headera_t::name_type& headera_t::
name () const
{
  return this->name_.get ();
}

headera_t::name_type& headera_t::
name ()
{
  return this->name_.get ();
}

void headera_t::
name (const name_type& x)
{
  this->name_.set (x);
}

void headera_t::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const headera_t::author_type& headera_t::
author () const
{
  return this->author_.get ();
}

headera_t::author_type& headera_t::
author ()
{
  return this->author_.get ();
}

void headera_t::
author (const author_type& x)
{
  this->author_.set (x);
}

void headera_t::
author (::std::auto_ptr< author_type > x)
{
  this->author_.set (x);
}

const headera_t::description_type& headera_t::
description () const
{
  return this->description_.get ();
}

headera_t::description_type& headera_t::
description ()
{
  return this->description_.get ();
}

void headera_t::
description (const description_type& x)
{
  this->description_.set (x);
}

void headera_t::
description (::std::auto_ptr< description_type > x)
{
  this->description_.set (x);
}

const headera_t::extra_type& headera_t::
extra () const
{
  return this->extra_.get ();
}

headera_t::extra_type& headera_t::
extra ()
{
  return this->extra_.get ();
}

void headera_t::
extra (const extra_type& x)
{
  this->extra_.set (x);
}

void headera_t::
extra (::std::auto_ptr< extra_type > x)
{
  this->extra_.set (x);
}

const headera_t::maxquestions_type& headera_t::
maxquestions () const
{
  return this->maxquestions_.get ();
}

headera_t::maxquestions_type& headera_t::
maxquestions ()
{
  return this->maxquestions_.get ();
}

void headera_t::
maxquestions (const maxquestions_type& x)
{
  this->maxquestions_.set (x);
}

const headera_t::answernumberinput_optional& headera_t::
answernumberinput () const
{
  return this->answernumberinput_;
}

headera_t::answernumberinput_optional& headera_t::
answernumberinput ()
{
  return this->answernumberinput_;
}

void headera_t::
answernumberinput (const answernumberinput_type& x)
{
  this->answernumberinput_.set (x);
}

void headera_t::
answernumberinput (const answernumberinput_optional& x)
{
  this->answernumberinput_ = x;
}

const headera_t::skipisincorrect_optional& headera_t::
skipisincorrect () const
{
  return this->skipisincorrect_;
}

headera_t::skipisincorrect_optional& headera_t::
skipisincorrect ()
{
  return this->skipisincorrect_;
}

void headera_t::
skipisincorrect (const skipisincorrect_type& x)
{
  this->skipisincorrect_.set (x);
}

void headera_t::
skipisincorrect (const skipisincorrect_optional& x)
{
  this->skipisincorrect_ = x;
}

const headera_t::quizmode_optional& headera_t::
quizmode () const
{
  return this->quizmode_;
}

headera_t::quizmode_optional& headera_t::
quizmode ()
{
  return this->quizmode_;
}

void headera_t::
quizmode (const quizmode_type& x)
{
  this->quizmode_.set (x);
}

void headera_t::
quizmode (const quizmode_optional& x)
{
  this->quizmode_ = x;
}

const headera_t::skipoverride_optional& headera_t::
skipoverride () const
{
  return this->skipoverride_;
}

headera_t::skipoverride_optional& headera_t::
skipoverride ()
{
  return this->skipoverride_;
}

void headera_t::
skipoverride (const skipoverride_type& x)
{
  this->skipoverride_.set (x);
}

void headera_t::
skipoverride (const skipoverride_optional& x)
{
  this->skipoverride_ = x;
}


// questionsa_t
// 

const questionsa_t::problem_sequence& questionsa_t::
problem () const
{
  return this->problem_;
}

questionsa_t::problem_sequence& questionsa_t::
problem ()
{
  return this->problem_;
}

void questionsa_t::
problem (const problem_sequence& s)
{
  this->problem_ = s;
}


// questiona_t
// 

const questiona_t::question_type& questiona_t::
question () const
{
  return this->question_.get ();
}

questiona_t::question_type& questiona_t::
question ()
{
  return this->question_.get ();
}

void questiona_t::
question (const question_type& x)
{
  this->question_.set (x);
}

void questiona_t::
question (::std::auto_ptr< question_type > x)
{
  this->question_.set (x);
}

const questiona_t::answers_type& questiona_t::
answers () const
{
  return this->answers_.get ();
}

questiona_t::answers_type& questiona_t::
answers ()
{
  return this->answers_.get ();
}

void questiona_t::
answers (const answers_type& x)
{
  this->answers_.set (x);
}

void questiona_t::
answers (::std::auto_ptr< answers_type > x)
{
  this->answers_.set (x);
}

const questiona_t::correctanswer_type& questiona_t::
correctanswer () const
{
  return this->correctanswer_.get ();
}

questiona_t::correctanswer_type& questiona_t::
correctanswer ()
{
  return this->correctanswer_.get ();
}

void questiona_t::
correctanswer (const correctanswer_type& x)
{
  this->correctanswer_.set (x);
}


// answersa_t
// 

const answersa_t::answer_sequence& answersa_t::
answer () const
{
  return this->answer_;
}

answersa_t::answer_sequence& answersa_t::
answer ()
{
  return this->answer_;
}

void answersa_t::
answer (const answer_sequence& s)
{
  this->answer_ = s;
}


// answera_t
// 

const answera_t::value_type& answera_t::
value () const
{
  return this->value_.get ();
}

answera_t::value_type& answera_t::
value ()
{
  return this->value_.get ();
}

void answera_t::
value (const value_type& x)
{
  this->value_.set (x);
}

void answera_t::
value (::std::auto_ptr< value_type > x)
{
  this->value_.set (x);
}


// typespec_t
// 

typespec_t::
typespec_t (value v)
: ::xml_schema::string (_xsd_typespec_t_literals_[v])
{
}

typespec_t::
typespec_t (const char* v)
: ::xml_schema::string (v)
{
}

typespec_t::
typespec_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

typespec_t::
typespec_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

typespec_t::
typespec_t (const typespec_t& v,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

typespec_t& typespec_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_typespec_t_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// qdata_t
//

qdata_t::
qdata_t (const type_type& type,
         const name_type& name)
: ::xml_schema::type (),
  header_ (::xml_schema::flags (), this),
  questions_ (::xml_schema::flags (), this),
  headera_ (::xml_schema::flags (), this),
  questionsa_ (::xml_schema::flags (), this),
  type_ (type, ::xml_schema::flags (), this),
  name_ (name, ::xml_schema::flags (), this)
{
}

qdata_t::
qdata_t (const qdata_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  header_ (x.header_, f, this),
  questions_ (x.questions_, f, this),
  headera_ (x.headera_, f, this),
  questionsa_ (x.questionsa_, f, this),
  type_ (x.type_, f, this),
  name_ (x.name_, f, this)
{
}

qdata_t::
qdata_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  header_ (f, this),
  questions_ (f, this),
  headera_ (f, this),
  questionsa_ (f, this),
  type_ (f, this),
  name_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void qdata_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // header
    //
    if (n.name () == "header" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< header_type > r (
        header_traits::create (i, f, this));

      if (!this->header_)
      {
        this->header_.set (r);
        continue;
      }
    }

    // questions
    //
    if (n.name () == "questions" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< questions_type > r (
        questions_traits::create (i, f, this));

      if (!this->questions_)
      {
        this->questions_.set (r);
        continue;
      }
    }

    // headera
    //
    if (n.name () == "headera" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< headera_type > r (
        headera_traits::create (i, f, this));

      if (!this->headera_)
      {
        this->headera_.set (r);
        continue;
      }
    }

    // questionsa
    //
    if (n.name () == "questionsa" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< questionsa_type > r (
        questionsa_traits::create (i, f, this));

      if (!this->questionsa_)
      {
        this->questionsa_.set (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< type_type > r (
        type_traits::create (i, f, this));

      this->type_.set (r);
      continue;
    }

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }
  }

  if (!type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "type",
      "");
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }
}

qdata_t* qdata_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class qdata_t (*this, f, c);
}

qdata_t::
~qdata_t ()
{
}

// header_t
//

header_t::
header_t (const name_type& name,
          const author_type& author,
          const description_type& description,
          const extra_type& extra,
          const maxquestions_type& maxquestions)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  author_ (author, ::xml_schema::flags (), this),
  description_ (description, ::xml_schema::flags (), this),
  extra_ (extra, ::xml_schema::flags (), this),
  maxquestions_ (maxquestions, ::xml_schema::flags (), this),
  answernumberinput_ (::xml_schema::flags (), this),
  skipisincorrect_ (::xml_schema::flags (), this),
  quizmode_ (::xml_schema::flags (), this),
  skipoverride_ (::xml_schema::flags (), this)
{
}

header_t::
header_t (const header_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  author_ (x.author_, f, this),
  description_ (x.description_, f, this),
  extra_ (x.extra_, f, this),
  maxquestions_ (x.maxquestions_, f, this),
  answernumberinput_ (x.answernumberinput_, f, this),
  skipisincorrect_ (x.skipisincorrect_, f, this),
  quizmode_ (x.quizmode_, f, this),
  skipoverride_ (x.skipoverride_, f, this)
{
}

header_t::
header_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  author_ (f, this),
  description_ (f, this),
  extra_ (f, this),
  maxquestions_ (f, this),
  answernumberinput_ (f, this),
  skipisincorrect_ (f, this),
  quizmode_ (f, this),
  skipoverride_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void header_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // name
    //
    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      if (!name_.present ())
      {
        this->name_.set (r);
        continue;
      }
    }

    // author
    //
    if (n.name () == "author" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< author_type > r (
        author_traits::create (i, f, this));

      if (!author_.present ())
      {
        this->author_.set (r);
        continue;
      }
    }

    // description
    //
    if (n.name () == "description" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< description_type > r (
        description_traits::create (i, f, this));

      if (!description_.present ())
      {
        this->description_.set (r);
        continue;
      }
    }

    // extra
    //
    if (n.name () == "extra" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< extra_type > r (
        extra_traits::create (i, f, this));

      if (!extra_.present ())
      {
        this->extra_.set (r);
        continue;
      }
    }

    // maxquestions
    //
    if (n.name () == "maxquestions" && n.namespace_ ().empty ())
    {
      if (!maxquestions_.present ())
      {
        this->maxquestions_.set (maxquestions_traits::create (i, f, this));
        continue;
      }
    }

    // answernumberinput
    //
    if (n.name () == "answernumberinput" && n.namespace_ ().empty ())
    {
      if (!this->answernumberinput_)
      {
        this->answernumberinput_.set (answernumberinput_traits::create (i, f, this));
        continue;
      }
    }

    // skipisincorrect
    //
    if (n.name () == "skipisincorrect" && n.namespace_ ().empty ())
    {
      if (!this->skipisincorrect_)
      {
        this->skipisincorrect_.set (skipisincorrect_traits::create (i, f, this));
        continue;
      }
    }

    // quizmode
    //
    if (n.name () == "quizmode" && n.namespace_ ().empty ())
    {
      if (!this->quizmode_)
      {
        this->quizmode_.set (quizmode_traits::create (i, f, this));
        continue;
      }
    }

    // skipoverride
    //
    if (n.name () == "skipoverride" && n.namespace_ ().empty ())
    {
      if (!this->skipoverride_)
      {
        this->skipoverride_.set (skipoverride_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "name",
      "");
  }

  if (!author_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "author",
      "");
  }

  if (!description_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "description",
      "");
  }

  if (!extra_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "extra",
      "");
  }

  if (!maxquestions_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxquestions",
      "");
  }
}

header_t* header_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class header_t (*this, f, c);
}

header_t::
~header_t ()
{
}

// questions_t
//

questions_t::
questions_t ()
: ::xml_schema::type (),
  problem_ (::xml_schema::flags (), this)
{
}

questions_t::
questions_t (const questions_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  problem_ (x.problem_, f, this)
{
}

questions_t::
questions_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  problem_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void questions_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // problem
    //
    if (n.name () == "problem" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< problem_type > r (
        problem_traits::create (i, f, this));

      this->problem_.push_back (r);
      continue;
    }

    break;
  }
}

questions_t* questions_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class questions_t (*this, f, c);
}

questions_t::
~questions_t ()
{
}

// question_t
//

question_t::
question_t (const question_type& question,
            const answers_type& answers,
            const correctanswer_type& correctanswer)
: ::xml_schema::type (),
  question_ (question, ::xml_schema::flags (), this),
  answers_ (answers, ::xml_schema::flags (), this),
  correctanswer_ (correctanswer, ::xml_schema::flags (), this)
{
}

question_t::
question_t (const question_type& question,
            ::std::auto_ptr< answers_type >& answers,
            const correctanswer_type& correctanswer)
: ::xml_schema::type (),
  question_ (question, ::xml_schema::flags (), this),
  answers_ (answers, ::xml_schema::flags (), this),
  correctanswer_ (correctanswer, ::xml_schema::flags (), this)
{
}

question_t::
question_t (const question_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  question_ (x.question_, f, this),
  answers_ (x.answers_, f, this),
  correctanswer_ (x.correctanswer_, f, this)
{
}

question_t::
question_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  question_ (f, this),
  answers_ (f, this),
  correctanswer_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void question_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // question
    //
    if (n.name () == "question" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< question_type > r (
        question_traits::create (i, f, this));

      if (!question_.present ())
      {
        this->question_.set (r);
        continue;
      }
    }

    // answers
    //
    if (n.name () == "answers" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< answers_type > r (
        answers_traits::create (i, f, this));

      if (!answers_.present ())
      {
        this->answers_.set (r);
        continue;
      }
    }

    // correctanswer
    //
    if (n.name () == "correctanswer" && n.namespace_ ().empty ())
    {
      if (!correctanswer_.present ())
      {
        this->correctanswer_.set (correctanswer_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!question_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "question",
      "");
  }

  if (!answers_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "answers",
      "");
  }

  if (!correctanswer_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "correctanswer",
      "");
  }
}

question_t* question_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class question_t (*this, f, c);
}

question_t::
~question_t ()
{
}

// answers_t
//

answers_t::
answers_t ()
: ::xml_schema::type (),
  answer_ (::xml_schema::flags (), this)
{
}

answers_t::
answers_t (const answers_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  answer_ (x.answer_, f, this)
{
}

answers_t::
answers_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  answer_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void answers_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // answer
    //
    if (n.name () == "answer" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< answer_type > r (
        answer_traits::create (i, f, this));

      this->answer_.push_back (r);
      continue;
    }

    break;
  }
}

answers_t* answers_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class answers_t (*this, f, c);
}

answers_t::
~answers_t ()
{
}

// headera_t
//

headera_t::
headera_t (const name_type& name,
           const author_type& author,
           const description_type& description,
           const extra_type& extra,
           const maxquestions_type& maxquestions)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  author_ (author, ::xml_schema::flags (), this),
  description_ (description, ::xml_schema::flags (), this),
  extra_ (extra, ::xml_schema::flags (), this),
  maxquestions_ (maxquestions, ::xml_schema::flags (), this),
  answernumberinput_ (::xml_schema::flags (), this),
  skipisincorrect_ (::xml_schema::flags (), this),
  quizmode_ (::xml_schema::flags (), this),
  skipoverride_ (::xml_schema::flags (), this)
{
}

headera_t::
headera_t (const headera_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  author_ (x.author_, f, this),
  description_ (x.description_, f, this),
  extra_ (x.extra_, f, this),
  maxquestions_ (x.maxquestions_, f, this),
  answernumberinput_ (x.answernumberinput_, f, this),
  skipisincorrect_ (x.skipisincorrect_, f, this),
  quizmode_ (x.quizmode_, f, this),
  skipoverride_ (x.skipoverride_, f, this)
{
}

headera_t::
headera_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  author_ (f, this),
  description_ (f, this),
  extra_ (f, this),
  maxquestions_ (f, this),
  answernumberinput_ (f, this),
  skipisincorrect_ (f, this),
  quizmode_ (f, this),
  skipoverride_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void headera_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "author" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< author_type > r (
        author_traits::create (i, f, this));

      this->author_.set (r);
      continue;
    }

    if (n.name () == "description" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< description_type > r (
        description_traits::create (i, f, this));

      this->description_.set (r);
      continue;
    }

    if (n.name () == "extra" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< extra_type > r (
        extra_traits::create (i, f, this));

      this->extra_.set (r);
      continue;
    }

    if (n.name () == "maxquestions" && n.namespace_ ().empty ())
    {
      this->maxquestions_.set (maxquestions_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "answernumberinput" && n.namespace_ ().empty ())
    {
      this->answernumberinput_.set (answernumberinput_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "skipisincorrect" && n.namespace_ ().empty ())
    {
      this->skipisincorrect_.set (skipisincorrect_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quizmode" && n.namespace_ ().empty ())
    {
      this->quizmode_.set (quizmode_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "skipoverride" && n.namespace_ ().empty ())
    {
      this->skipoverride_.set (skipoverride_traits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!author_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "author",
      "");
  }

  if (!description_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "description",
      "");
  }

  if (!extra_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "extra",
      "");
  }

  if (!maxquestions_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "maxquestions",
      "");
  }
}

headera_t* headera_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class headera_t (*this, f, c);
}

headera_t::
~headera_t ()
{
}

// questionsa_t
//

questionsa_t::
questionsa_t ()
: ::xml_schema::type (),
  problem_ (::xml_schema::flags (), this)
{
}

questionsa_t::
questionsa_t (const questionsa_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  problem_ (x.problem_, f, this)
{
}

questionsa_t::
questionsa_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  problem_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void questionsa_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // problem
    //
    if (n.name () == "problem" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< problem_type > r (
        problem_traits::create (i, f, this));

      this->problem_.push_back (r);
      continue;
    }

    break;
  }
}

questionsa_t* questionsa_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class questionsa_t (*this, f, c);
}

questionsa_t::
~questionsa_t ()
{
}

// questiona_t
//

questiona_t::
questiona_t (const question_type& question,
             const answers_type& answers,
             const correctanswer_type& correctanswer)
: ::xml_schema::type (),
  question_ (question, ::xml_schema::flags (), this),
  answers_ (answers, ::xml_schema::flags (), this),
  correctanswer_ (correctanswer, ::xml_schema::flags (), this)
{
}

questiona_t::
questiona_t (const question_type& question,
             ::std::auto_ptr< answers_type >& answers,
             const correctanswer_type& correctanswer)
: ::xml_schema::type (),
  question_ (question, ::xml_schema::flags (), this),
  answers_ (answers, ::xml_schema::flags (), this),
  correctanswer_ (correctanswer, ::xml_schema::flags (), this)
{
}

questiona_t::
questiona_t (const questiona_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  question_ (x.question_, f, this),
  answers_ (x.answers_, f, this),
  correctanswer_ (x.correctanswer_, f, this)
{
}

questiona_t::
questiona_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  question_ (f, this),
  answers_ (f, this),
  correctanswer_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void questiona_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // question
    //
    if (n.name () == "question" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< question_type > r (
        question_traits::create (i, f, this));

      if (!question_.present ())
      {
        this->question_.set (r);
        continue;
      }
    }

    // answers
    //
    if (n.name () == "answers" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< answers_type > r (
        answers_traits::create (i, f, this));

      if (!answers_.present ())
      {
        this->answers_.set (r);
        continue;
      }
    }

    break;
  }

  if (!question_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "question",
      "");
  }

  if (!answers_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "answers",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "correctanswer" && n.namespace_ ().empty ())
    {
      this->correctanswer_.set (correctanswer_traits::create (i, f, this));
      continue;
    }
  }

  if (!correctanswer_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "correctanswer",
      "");
  }
}

questiona_t* questiona_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class questiona_t (*this, f, c);
}

questiona_t::
~questiona_t ()
{
}

// answersa_t
//

answersa_t::
answersa_t ()
: ::xml_schema::type (),
  answer_ (::xml_schema::flags (), this)
{
}

answersa_t::
answersa_t (const answersa_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  answer_ (x.answer_, f, this)
{
}

answersa_t::
answersa_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  answer_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
    this->parse (p, f);
  }
}

void answersa_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // answer
    //
    if (n.name () == "answer" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< answer_type > r (
        answer_traits::create (i, f, this));

      this->answer_.push_back (r);
      continue;
    }

    break;
  }
}

answersa_t* answersa_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class answersa_t (*this, f, c);
}

answersa_t::
~answersa_t ()
{
}

// answera_t
//

answera_t::
answera_t (const value_type& value)
: ::xml_schema::type (),
  value_ (value, ::xml_schema::flags (), this)
{
}

answera_t::
answera_t (const answera_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  value_ (x.value_, f, this)
{
}

answera_t::
answera_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  value_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void answera_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< value_type > r (
        value_traits::create (i, f, this));

      this->value_.set (r);
      continue;
    }
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "value",
      "");
  }
}

answera_t* answera_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class answera_t (*this, f, c);
}

answera_t::
~answera_t ()
{
}

// typespec_t
//

typespec_t::
typespec_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_typespec_t_convert ();
}

typespec_t::
typespec_t (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_typespec_t_convert ();
}

typespec_t::
typespec_t (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_typespec_t_convert ();
}

typespec_t* typespec_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class typespec_t (*this, f, c);
}

typespec_t::value typespec_t::
_xsd_typespec_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_typespec_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_typespec_t_indexes_,
                    _xsd_typespec_t_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_typespec_t_indexes_ + 2 || _xsd_typespec_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const typespec_t::
_xsd_typespec_t_literals_[2] =
{
  "ELEMENT",
  "ATTRIBUTE"
};

const typespec_t::value typespec_t::
_xsd_typespec_t_indexes_[2] =
{
  ::typespec_t::ATTRIBUTE,
  ::typespec_t::ELEMENT
};

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::qdata_t >
qdata (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::qdata_t > r (
    ::qdata (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::qdata_t >
qdata (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::qdata_t > r (
    ::qdata (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::qdata_t >
qdata (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::qdata_t > r (
    ::qdata (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::qdata_t >
qdata (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::qdata (isrc, f, p);
}

::std::auto_ptr< ::qdata_t >
qdata (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::qdata (isrc, h, f, p);
}

::std::auto_ptr< ::qdata_t >
qdata (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::qdata (isrc, h, f, p);
}

::std::auto_ptr< ::qdata_t >
qdata (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::qdata (isrc, f, p);
}

::std::auto_ptr< ::qdata_t >
qdata (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::qdata (isrc, h, f, p);
}

::std::auto_ptr< ::qdata_t >
qdata (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::qdata (isrc, h, f, p);
}

::std::auto_ptr< ::qdata_t >
qdata (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::qdata_t > r (
    ::qdata (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::qdata_t >
qdata (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::qdata_t > r (
    ::qdata (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::qdata_t >
qdata (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::qdata_t > r (
    ::qdata (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::qdata_t >
qdata (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::qdata_t > r (
      ::qdata (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "qdata" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::qdata_t > r (
      ::xsd::cxx::tree::traits< ::qdata_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "qdata",
    "");
}

::std::auto_ptr< ::qdata_t >
qdata (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "qdata" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::qdata_t > r (
      ::xsd::cxx::tree::traits< ::qdata_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "qdata",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const qdata_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // header
  //
  if (i.header ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "header",
        e));

    s << *i.header ();
  }

  // questions
  //
  if (i.questions ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "questions",
        e));

    s << *i.questions ();
  }

  // headera
  //
  if (i.headera ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "headera",
        e));

    s << *i.headera ();
  }

  // questionsa
  //
  if (i.questionsa ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "questionsa",
        e));

    s << *i.questionsa ();
  }

  // type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "type",
        e));

    a << i.type ();
  }

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const header_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "name",
        e));

    s << i.name ();
  }

  // author
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "author",
        e));

    s << i.author ();
  }

  // description
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "description",
        e));

    s << i.description ();
  }

  // extra
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "extra",
        e));

    s << i.extra ();
  }

  // maxquestions
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxquestions",
        e));

    s << i.maxquestions ();
  }

  // answernumberinput
  //
  if (i.answernumberinput ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "answernumberinput",
        e));

    s << *i.answernumberinput ();
  }

  // skipisincorrect
  //
  if (i.skipisincorrect ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "skipisincorrect",
        e));

    s << *i.skipisincorrect ();
  }

  // quizmode
  //
  if (i.quizmode ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "quizmode",
        e));

    s << *i.quizmode ();
  }

  // skipoverride
  //
  if (i.skipoverride ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "skipoverride",
        e));

    s << *i.skipoverride ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const questions_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // problem
  //
  for (questions_t::problem_const_iterator
       b (i.problem ().begin ()), n (i.problem ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "problem",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const question_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // question
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "question",
        e));

    s << i.question ();
  }

  // answers
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "answers",
        e));

    s << i.answers ();
  }

  // correctanswer
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "correctanswer",
        e));

    s << i.correctanswer ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const answers_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // answer
  //
  for (answers_t::answer_const_iterator
       b (i.answer ().begin ()), n (i.answer ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "answer",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const headera_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // author
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "author",
        e));

    a << i.author ();
  }

  // description
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "description",
        e));

    a << i.description ();
  }

  // extra
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "extra",
        e));

    a << i.extra ();
  }

  // maxquestions
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "maxquestions",
        e));

    a << i.maxquestions ();
  }

  // answernumberinput
  //
  if (i.answernumberinput ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "answernumberinput",
        e));

    a << *i.answernumberinput ();
  }

  // skipisincorrect
  //
  if (i.skipisincorrect ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "skipisincorrect",
        e));

    a << *i.skipisincorrect ();
  }

  // quizmode
  //
  if (i.quizmode ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quizmode",
        e));

    a << *i.quizmode ();
  }

  // skipoverride
  //
  if (i.skipoverride ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "skipoverride",
        e));

    a << *i.skipoverride ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const questionsa_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // problem
  //
  for (questionsa_t::problem_const_iterator
       b (i.problem ().begin ()), n (i.problem ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "problem",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const questiona_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // question
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "question",
        e));

    s << i.question ();
  }

  // answers
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "answers",
        e));

    s << i.answers ();
  }

  // correctanswer
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "correctanswer",
        e));

    a << i.correctanswer ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const answersa_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // answer
  //
  for (answersa_t::answer_const_iterator
       b (i.answer ().begin ()), n (i.answer ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "answer",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const answera_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // value
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << i.value ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const typespec_t& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const typespec_t& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const typespec_t& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
qdata (::std::ostream& o,
       const ::qdata_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::qdata (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
qdata (::std::ostream& o,
       const ::qdata_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::qdata (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
qdata (::std::ostream& o,
       const ::qdata_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::qdata (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
qdata (::xercesc::XMLFormatTarget& t,
       const ::qdata_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::qdata (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
qdata (::xercesc::XMLFormatTarget& t,
       const ::qdata_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::qdata (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
qdata (::xercesc::XMLFormatTarget& t,
       const ::qdata_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::qdata (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
qdata (::xercesc::DOMDocument& d,
       const ::qdata_t& s,
       ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "qdata" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "qdata",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
qdata (const ::qdata_t& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "qdata",
      "",
      m, f));

  ::qdata (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

